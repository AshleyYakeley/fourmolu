diff --git a/Cabal-syntax/src/Distribution/Compat/Prelude.hs b/Cabal-syntax/src/Distribution/Compat/Prelude.hs
index 3cbf3c1..4aa252c 100644
--- a/Cabal-syntax/src/Distribution/Compat/Prelude.hs
+++ b/Cabal-syntax/src/Distribution/Compat/Prelude.hs
@@ -22,7 +22,7 @@ module Distribution.Compat.Prelude
 
   --
   -- Prelude is re-exported, following is hidden:
-      module BasePrelude
+    module BasePrelude
 
     -- * Common type-classes
   , Semigroup (..)
diff --git a/Cabal-syntax/src/Distribution/PackageDescription.hs b/Cabal-syntax/src/Distribution/PackageDescription.hs
index 47d4667..ffd1713 100644
--- a/Cabal-syntax/src/Distribution/PackageDescription.hs
+++ b/Cabal-syntax/src/Distribution/PackageDescription.hs
@@ -12,7 +12,7 @@
 -- about @.cabal@ files.
 module Distribution.PackageDescription
   ( -- * PD and GPD
-      module Distribution.Types.PackageDescription
+    module Distribution.Types.PackageDescription
   , module Distribution.Types.GenericPackageDescription
 
     -- * Components
diff --git a/Cabal/src/Distribution/Backpack/MixLink.hs b/Cabal/src/Distribution/Backpack/MixLink.hs
index b358612..3e4cc8d 100644
--- a/Cabal/src/Distribution/Backpack/MixLink.hs
+++ b/Cabal/src/Distribution/Backpack/MixLink.hs
@@ -61,11 +61,11 @@ linkProvision mod_name ret@(prov : provs) (req : reqs) = do
           text "Ambiguous module"
             <+> quotes (pretty mod_name)
             $$ text "It could refer to"
-            <+> ( text "  "
-                    <+> (quotes (pretty mod) $$ in_scope_by (getSource prov))
-                    $$ text "or"
-                    <+> (quotes (pretty mod') $$ in_scope_by (getSource prov'))
-                )
+              <+> ( text "  "
+                      <+> (quotes (pretty mod) $$ in_scope_by (getSource prov))
+                      $$ text "or"
+                        <+> (quotes (pretty mod') $$ in_scope_by (getSource prov'))
+                  )
             $$ link_doc
   mod <- convertModuleU (unWithSource prov)
   req_mod <- convertModuleU (unWithSource req)
@@ -78,7 +78,7 @@ linkProvision mod_name ret@(prov : provs) (req : reqs) = do
               <+> quotes (pretty mod_name)
               <+> in_scope_by (getSource req)
               $$ text "with locally defined module"
-              <+> in_scope_by (getSource prov)
+                <+> in_scope_by (getSource prov)
               $$ text "as this would create a cyclic dependency, which GHC does not support."
               $$ text "Try moving this module to a separate library, e.g.,"
               $$ text "create a new stanza: library 'sublib'."
@@ -96,7 +96,7 @@ linkProvision mod_name ret@(prov : provs) (req : reqs) = do
             ( text "Expected:"
                 <+> pretty mod
                 $$ text "Actual:  "
-                <+> pretty req_mod
+                  <+> pretty req_mod
             )
           $$ parens
             ( text "This can occur if an exposed module of"
@@ -144,7 +144,7 @@ unifyUnitId uid1_u uid2_u
                   ( text "   "
                       <+> pretty u1
                       $$ text "and"
-                      <+> pretty u2
+                        <+> pretty u2
                   )
         (UnitIdThunkU uid1, UnitIdU _ cid2 insts2) ->
           unifyThunkWith cid2 insts2 uid2_u uid1 uid1_u
@@ -185,7 +185,7 @@ unifyInner cid1 insts1 uid1_u cid2 insts2 uid2_u = do
         ( text "   "
             <+> pretty cid1
             $$ text "and"
-            <+> pretty cid2
+              <+> pretty cid2
         )
   -- The KEY STEP which makes this a Huet-style unification
   -- algorithm.  (Also a payoff of using union-find.)
@@ -213,7 +213,7 @@ unifyModule mod1_u mod2_u
                 text "   "
                   <+> pretty mod_name1
                   $$ text "and"
-                  <+> pretty mod_name2
+                    <+> pretty mod_name2
           -- NB: this is not actually necessary (because we'll
           -- detect loops eventually in 'unifyUnitId'), but it
           -- seems harmless enough
diff --git a/Cabal/src/Distribution/Backpack/UnifyM.hs b/Cabal/src/Distribution/Backpack/UnifyM.hs
index 6e0f00d..010bffc 100644
--- a/Cabal/src/Distribution/Backpack/UnifyM.hs
+++ b/Cabal/src/Distribution/Backpack/UnifyM.hs
@@ -422,7 +422,7 @@ failWithMutuallyRecursiveUnitsError required_mod_name mod_names =
         text "Cannot instantiate requirement"
           <+> quotes required_mod_name
           $$ text "Ensure \"build-depends:\" doesn't include any library with signatures:"
-          <+> sigsList
+            <+> sigsList
           $$ text "as this creates a cyclic dependency, which GHC does not support."
 
 -- Helper functions
@@ -532,7 +532,7 @@ convertInclude
             text "Conflicting renamings of requirement"
               <+> quotes (pretty k)
               $$ text "Renamed to: "
-              <+> vcat (map pretty (v : vs))
+                <+> vcat (map pretty (v : vs))
           return v
 
     let req_rename_fn k = case Map.lookup k req_rename of
diff --git a/Cabal/src/Distribution/PackageDescription/Check.hs b/Cabal/src/Distribution/PackageDescription/Check.hs
index e8be60f..1b33bd9 100644
--- a/Cabal/src/Distribution/PackageDescription/Check.hs
+++ b/Cabal/src/Distribution/PackageDescription/Check.hs
@@ -2732,7 +2732,6 @@ checkGlobFiles verbosity pkg root = do
       then -- No missing desirable file
         warnings
       else -- Some missing desirable files
-
         warnings
           ++ let unlisted' = (root </>) <$> unlisted
               in [ PackageDistSuspiciousWarn
@@ -2828,12 +2827,10 @@ checkGlobFiles verbosity pkg root = do
     checkDoc isDocField path docFiles wrongFieldPaths =
       if path `elem` docFiles
         then -- Found desirable doc file
-
           ( delete path docFiles
           , if isDocField then wrongFieldPaths else path : wrongFieldPaths
           )
         else -- Not a desirable doc file
-
           ( docFiles
           , wrongFieldPaths
           )
diff --git a/Cabal/src/Distribution/Simple/Compiler.hs b/Cabal/src/Distribution/Simple/Compiler.hs
index 074f2f3..0ac9d19 100644
--- a/Cabal/src/Distribution/Simple/Compiler.hs
+++ b/Cabal/src/Distribution/Simple/Compiler.hs
@@ -23,7 +23,7 @@
 -- not yet fully support this latter feature.
 module Distribution.Simple.Compiler
   ( -- * Haskell implementations
-      module Distribution.Compiler
+    module Distribution.Compiler
   , Compiler (..)
   , showCompilerId
   , showCompilerIdWithAbi
diff --git a/Cabal/src/Distribution/Simple/Configure.hs b/Cabal/src/Distribution/Simple/Configure.hs
index 9298ab0..6a219bd 100644
--- a/Cabal/src/Distribution/Simple/Configure.hs
+++ b/Cabal/src/Distribution/Simple/Configure.hs
@@ -1149,7 +1149,6 @@ dependencySatisfiable
           -- those are just True.
             internalDepSatisfiable
           else -- Backward compatibility for the old sublibrary syntax
-
             ( sublibs == mainLibSet
                 && Map.member
                   ( pn
diff --git a/Cabal/src/Distribution/Simple/GHC.hs b/Cabal/src/Distribution/Simple/GHC.hs
index f01d096..cd2c614 100644
--- a/Cabal/src/Distribution/Simple/GHC.hs
+++ b/Cabal/src/Distribution/Simple/GHC.hs
@@ -2501,47 +2501,47 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir pkg lib clbi = do
       whenGHCi $ installOrdinary builtDir targetDir ghciProfLibName
     whenShared $
       if
-          -- The behavior for "extra-bundled-libraries" changed in version 2.5.0.
-          -- See ghc issue #15837 and Cabal PR #5855.
-          | specVersion pkg < CabalSpecV3_0 -> do
-              sequence_
-                [ installShared
-                  builtDir
-                  dynlibTargetDir
-                  (mkGenericSharedLibName platform compiler_id (l ++ f))
-                | l <- getHSLibraryName uid : extraBundledLibs (libBuildInfo lib)
-                , f <- "" : extraDynLibFlavours (libBuildInfo lib)
-                ]
-          | otherwise -> do
-              sequence_
-                [ installShared
-                  builtDir
-                  dynlibTargetDir
-                  ( mkGenericSharedLibName
-                      platform
-                      compiler_id
-                      (getHSLibraryName uid ++ f)
-                  )
-                | f <- "" : extraDynLibFlavours (libBuildInfo lib)
-                ]
-              sequence_
-                [ do
-                  files <- getDirectoryContents builtDir
-                  let l' =
-                        mkGenericSharedBundledLibName
-                          platform
-                          compiler_id
-                          l
-                  forM_ files $ \file ->
-                    when (l' `isPrefixOf` file) $ do
-                      isFile <- doesFileExist (builtDir </> file)
-                      when isFile $ do
-                        installShared
-                          builtDir
-                          dynlibTargetDir
-                          file
-                | l <- extraBundledLibs (libBuildInfo lib)
-                ]
+        -- The behavior for "extra-bundled-libraries" changed in version 2.5.0.
+        -- See ghc issue #15837 and Cabal PR #5855.
+        | specVersion pkg < CabalSpecV3_0 -> do
+            sequence_
+              [ installShared
+                builtDir
+                dynlibTargetDir
+                (mkGenericSharedLibName platform compiler_id (l ++ f))
+              | l <- getHSLibraryName uid : extraBundledLibs (libBuildInfo lib)
+              , f <- "" : extraDynLibFlavours (libBuildInfo lib)
+              ]
+        | otherwise -> do
+            sequence_
+              [ installShared
+                builtDir
+                dynlibTargetDir
+                ( mkGenericSharedLibName
+                    platform
+                    compiler_id
+                    (getHSLibraryName uid ++ f)
+                )
+              | f <- "" : extraDynLibFlavours (libBuildInfo lib)
+              ]
+            sequence_
+              [ do
+                files <- getDirectoryContents builtDir
+                let l' =
+                      mkGenericSharedBundledLibName
+                        platform
+                        compiler_id
+                        l
+                forM_ files $ \file ->
+                  when (l' `isPrefixOf` file) $ do
+                    isFile <- doesFileExist (builtDir </> file)
+                    when isFile $ do
+                      installShared
+                        builtDir
+                        dynlibTargetDir
+                        file
+              | l <- extraBundledLibs (libBuildInfo lib)
+              ]
   where
     builtDir = componentBuildDir lbi clbi
 
diff --git a/Cabal/src/Distribution/Simple/GHC/Internal.hs b/Cabal/src/Distribution/Simple/GHC/Internal.hs
index bb77d20..b15b373 100644
--- a/Cabal/src/Distribution/Simple/GHC/Internal.hs
+++ b/Cabal/src/Distribution/Simple/GHC/Internal.hs
@@ -303,7 +303,6 @@ getExtensions verbosity implInfo ghcProg = do
           then lines str
           else -- Older GHCs only gave us either Foo or NoFoo,
           -- so we have to work out the other one ourselves
-
             [ extStr''
             | extStr <- lines str
             , let extStr' = case extStr of
@@ -323,7 +322,6 @@ getExtensions verbosity implInfo ghcProg = do
           -- Since it was not a proper extension, it could
           -- not be turned off, hence we omit a
           -- DisableExtension entry here.
-
             (EnableExtension NondecreasingIndentation, Nothing)
               : extensions0
           else extensions0
diff --git a/Cabal/src/Distribution/Simple/PreProcess.hs b/Cabal/src/Distribution/Simple/PreProcess.hs
index 03b13ae..d96deb0 100644
--- a/Cabal/src/Distribution/Simple/PreProcess.hs
+++ b/Cabal/src/Distribution/Simple/PreProcess.hs
@@ -741,8 +741,9 @@ ppC2hs bi lbi clbi =
                    | pkg <- pkgs
                    , opt <-
                       ["-I" ++ opt | opt <- Installed.includeDirs pkg]
-                        ++ [ opt | opt@('-' : c : _) <- Installed.ccOptions pkg,
-                           -- c2hs uses the C ABI
+                        ++ [ opt
+                           | opt@('-' : c : _) <- Installed.ccOptions pkg
+                           , -- c2hs uses the C ABI
                            -- We assume that there are only C sources
                            -- and C++ functions are exported via a C
                            -- interface and wrapped in a C source file.
diff --git a/Cabal/src/Distribution/Simple/Register.hs b/Cabal/src/Distribution/Simple/Register.hs
index fc6075d..4b84d47 100644
--- a/Cabal/src/Distribution/Simple/Register.hs
+++ b/Cabal/src/Distribution/Simple/Register.hs
@@ -267,7 +267,6 @@ generateRegistrationInfo verbosity pkg lib lbi clbi inplace reloc distPref packa
       then -- NB: With an inplace installation, the user may run './Setup
       -- build' to update the library files, without reregistering.
       -- In this case, it is critical that the ABI hash not flip.
-
         return
           ( inplaceInstalledPackageInfo
               pwd
diff --git a/cabal-install/src/Distribution/Client/CmdHaddockProject.hs b/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
index d63e890..28b7f43 100644
--- a/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
+++ b/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
@@ -289,7 +289,7 @@ haddockProjectAction flags _extraArgs globalFlags = do
                     interfacePath =
                       destDir
                         </> packageName
-                        <.> "haddock"
+                          <.> "haddock"
                 a <- doesDirectoryExist docDir
                 case a of
                   True ->
@@ -325,7 +325,7 @@ haddockProjectAction flags _extraArgs globalFlags = do
                     interfacePath =
                       destDir
                         </> packageName
-                        <.> "haddock"
+                          <.> "haddock"
                 a <- doesDirectoryExist docDir
                 case a of
                   True ->
diff --git a/cabal-install/src/Distribution/Client/CmdInstall.hs b/cabal-install/src/Distribution/Client/CmdInstall.hs
index 46ce2cd..5e88914 100644
--- a/cabal-install/src/Distribution/Client/CmdInstall.hs
+++ b/cabal-install/src/Distribution/Client/CmdInstall.hs
@@ -1201,7 +1201,7 @@ getLocalEnv :: FilePath -> Platform -> Version -> FilePath
 getLocalEnv dir platform compilerVersion =
   dir
     </> ".ghc.environment."
-    <> ghcPlatformAndVersionString platform compilerVersion
+      <> ghcPlatformAndVersionString platform compilerVersion
 
 getPackageDbStack
   :: CompilerId
diff --git a/cabal-install/src/Distribution/Client/CmdRepl.hs b/cabal-install/src/Distribution/Client/CmdRepl.hs
index d8458b9..7d00721 100644
--- a/cabal-install/src/Distribution/Client/CmdRepl.hs
+++ b/cabal-install/src/Distribution/Client/CmdRepl.hs
@@ -344,18 +344,18 @@ replAction flags@NixStyleFlags{extraFlags = r@ReplFlags{..}, ..} targetStrings g
         else -- Unfortunately, the best way to do this is to let the normal solver
         -- help us resolve the targets, but that isn't ideal for performance,
         -- especially in the no-project case.
-        withInstallPlan (lessVerbose verbosity) baseCtx' $ \elaboratedPlan sharedConfig -> do
-          -- targets should be non-empty map, but there's no NonEmptyMap yet.
-          targets <- validatedTargets (projectConfigShared (projectConfig ctx)) (pkgConfigCompiler sharedConfig) elaboratedPlan targetSelectors
-
-          let
-            (unitId, _) = fromMaybe (error "panic: targets should be non-empty") $ safeHead $ Map.toList targets
-            originalDeps = installedUnitId <$> InstallPlan.directDeps elaboratedPlan unitId
-            oci = OriginalComponentInfo unitId originalDeps
-            pkgId = fromMaybe (error $ "cannot find " ++ prettyShow unitId) $ packageId <$> InstallPlan.lookup elaboratedPlan unitId
-            baseCtx'' = addDepsToProjectTarget (envPackages replEnvFlags) pkgId baseCtx'
-
-          return (Just oci, baseCtx'')
+          withInstallPlan (lessVerbose verbosity) baseCtx' $ \elaboratedPlan sharedConfig -> do
+            -- targets should be non-empty map, but there's no NonEmptyMap yet.
+            targets <- validatedTargets (projectConfigShared (projectConfig ctx)) (pkgConfigCompiler sharedConfig) elaboratedPlan targetSelectors
+
+            let
+              (unitId, _) = fromMaybe (error "panic: targets should be non-empty") $ safeHead $ Map.toList targets
+              originalDeps = installedUnitId <$> InstallPlan.directDeps elaboratedPlan unitId
+              oci = OriginalComponentInfo unitId originalDeps
+              pkgId = fromMaybe (error $ "cannot find " ++ prettyShow unitId) $ packageId <$> InstallPlan.lookup elaboratedPlan unitId
+              baseCtx'' = addDepsToProjectTarget (envPackages replEnvFlags) pkgId baseCtx'
+
+            return (Just oci, baseCtx'')
 
     -- Now, we run the solver again with the added packages. While the graph
     -- won't actually reflect the addition of transitive dependencies,
diff --git a/cabal-install/src/Distribution/Client/CmdSdist.hs b/cabal-install/src/Distribution/Client/CmdSdist.hs
index cd59466..ef87ab3 100644
--- a/cabal-install/src/Distribution/Client/CmdSdist.hs
+++ b/cabal-install/src/Distribution/Client/CmdSdist.hs
@@ -240,9 +240,9 @@ sdistAction (pf@ProjectFlags{..}, SdistFlags{..}) targetStrings globalFlags = do
   let format :: OutputFormat
       format =
         if
-            | listSources, nulSeparated -> SourceList '\0'
-            | listSources -> SourceList '\n'
-            | otherwise -> TarGzArchive
+          | listSources, nulSeparated -> SourceList '\0'
+          | listSources -> SourceList '\n'
+          | otherwise -> TarGzArchive
 
       ext = case format of
         SourceList _ -> "list"
diff --git a/cabal-install/src/Distribution/Client/Fetch.hs b/cabal-install/src/Distribution/Client/Fetch.hs
index 724c583..a5946da 100644
--- a/cabal-install/src/Distribution/Client/Fetch.hs
+++ b/cabal-install/src/Distribution/Client/Fetch.hs
@@ -137,7 +137,6 @@ fetch
       then -- TODO: when we add support for remote tarballs then this message
       -- will need to be changed because for remote tarballs we fetch them
       -- at the earlier phase.
-
         notice verbosity $
           "No packages need to be fetched. "
             ++ "All the requested packages are already local "
diff --git a/cabal-install/src/Distribution/Client/FetchUtils.hs b/cabal-install/src/Distribution/Client/FetchUtils.hs
index 2ad9ea2..16468a2 100644
--- a/cabal-install/src/Distribution/Client/FetchUtils.hs
+++ b/cabal-install/src/Distribution/Client/FetchUtils.hs
@@ -368,7 +368,7 @@ packageFile :: Repo -> PackageId -> FilePath
 packageFile repo pkgid =
   packageDir repo pkgid
     </> prettyShow pkgid
-    <.> "tar.gz"
+      <.> "tar.gz"
 
 -- | Generate the full path to the directory where the local cached copy of
 -- the tarball for a given @PackageIdentifier@ is stored.
diff --git a/cabal-install/src/Distribution/Client/HttpUtils.hs b/cabal-install/src/Distribution/Client/HttpUtils.hs
index 3d27882..81c67e7 100644
--- a/cabal-install/src/Distribution/Client/HttpUtils.hs
+++ b/cabal-install/src/Distribution/Client/HttpUtils.hs
@@ -181,12 +181,12 @@ downloadURI transport verbosity uri path = do
           die' verbosity $
             "Cannot parse URI fragment " ++ uriFrag ++ " " ++ err
       else -- if there are no uri fragment, use ETag
-      do
-        etagPathExists <- doesFileExist etagPath
-        -- In rare cases the target file doesn't exist, but the etag does.
-        if targetExists && etagPathExists
-          then return (CheckETag etagPath)
-          else return (NeedsDownload Nothing)
+        do
+          etagPathExists <- doesFileExist etagPath
+          -- In rare cases the target file doesn't exist, but the etag does.
+          if targetExists && etagPathExists
+            then return (CheckETag etagPath)
+            else return (NeedsDownload Nothing)
 
   -- Only use the external http transports if we actually have to
   -- (or have been told to do so)
diff --git a/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs b/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
index 2fab0db..ad222a0 100644
--- a/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
+++ b/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
@@ -459,10 +459,10 @@ languagePrompt flags pkgType = getLanguage flags $ do
       True
 
   if
-      | l == h2010 -> return Haskell2010
-      | l == h98 -> return Haskell98
-      | l == ghc2021 -> return GHC2021
-      | otherwise -> return $ UnknownLanguage l
+    | l == h2010 -> return Haskell2010
+    | l == h98 -> return Haskell98
+    | l == ghc2021 -> return GHC2021
+    | otherwise -> return $ UnknownLanguage l
 
 noCommentsPrompt :: Interactive m => InitFlags -> m Bool
 noCommentsPrompt flags = getNoComments flags $ do
diff --git a/cabal-install/src/Distribution/Client/Install.hs b/cabal-install/src/Distribution/Client/Install.hs
index 93ad8e5..8ae3960 100644
--- a/cabal-install/src/Distribution/Client/Install.hs
+++ b/cabal-install/src/Distribution/Client/Install.hs
@@ -1760,7 +1760,7 @@ installLocalTarballPackage
             descFilePath =
               absUnpackedPath
                 </> prettyShow (packageName pkgid)
-                <.> "cabal"
+                  <.> "cabal"
         info verbosity $
           "Extracting "
             ++ tarballPath
@@ -1857,7 +1857,7 @@ installUnpackedPackage
         let descFilePath =
               fromMaybe "." workingDir
                 </> prettyShow (packageName pkgid)
-                <.> "cabal"
+                  <.> "cabal"
         info verbosity $
           "Updating "
             ++ prettyShow (packageName pkgid) <.> "cabal"
@@ -2030,7 +2030,6 @@ installUnpackedPackage
               if is_dir
                 then -- Sort so that each prefix of the package
                 -- configurations is well formed
-
                   traverse (readPkgConf pkgConfDest) . sort . filter notHidden
                     =<< getDirectoryContents pkgConfDest
                 else fmap (: []) $ readPkgConf "." pkgConfDest
diff --git a/cabal-install/src/Distribution/Client/List.hs b/cabal-install/src/Distribution/Client/List.hs
index ef9285b..f8a136d 100644
--- a/cabal-install/src/Distribution/Client/List.hs
+++ b/cabal-install/src/Distribution/Client/List.hs
@@ -238,7 +238,6 @@ list verbosity packageDBs repos mcompProgdb listFlags pats = do
     else -- Note: this only works because for 'list', one cannot currently
     -- specify any version constraints, so listing all installed
     -- and source ones works.
-
       if null matches
         then notice verbosity "No matches found."
         else putStr $ unlines (map showPackageSummaryInfo matches)
@@ -463,9 +462,9 @@ showPackageDetailedInfo pkginfo =
   renderStyle (style{lineLength = 80, ribbonsPerLine = 1}) $
     char '*'
       <+> pretty (pkgName pkginfo)
-        <<>> maybe Disp.empty (\v -> char '-' Disp.<> pretty v) (selectedVersion pkginfo)
+      <<>> maybe Disp.empty (\v -> char '-' Disp.<> pretty v) (selectedVersion pkginfo)
       <+> text (replicate (16 - length (prettyShow (pkgName pkginfo))) ' ')
-        <<>> parens pkgkind
+      <<>> parens pkgkind
       $+$ ( nest 4 $
               vcat
                 [ entryST "Synopsis" synopsis hideIfNull reflowParagraphs
diff --git a/cabal-install/src/Distribution/Client/ParseUtils.hs b/cabal-install/src/Distribution/Client/ParseUtils.hs
index 44cdc4c..f79c10d 100644
--- a/cabal-install/src/Distribution/Client/ParseUtils.hs
+++ b/cabal-install/src/Distribution/Client/ParseUtils.hs
@@ -126,7 +126,8 @@ commandOptionsToFields = map viewAsFieldDescr
 
 -- | The description of a section in a config file. It can contain both
 -- fields and optionally further subsections. See also 'FieldDescr'.
-data SectionDescr a = forall b.
+data SectionDescr a
+  = forall b.
   SectionDescr
   { sectionName :: String
   , sectionFields :: [FieldDescr b]
@@ -137,7 +138,8 @@ data SectionDescr a = forall b.
   }
 
 -- | 'FieldGrammar' section description
-data FGSectionDescr g a = forall s.
+data FGSectionDescr g a
+  = forall s.
   FGSectionDescr
   { fgSectionName :: String
   , fgSectionGrammar :: g s s
@@ -211,8 +213,8 @@ ppField name mdef cur
         ( \def ->
             Disp.text "--"
               <+> Disp.text name
-                Disp.<> Disp.colon
-              <+> def
+              Disp.<> Disp.colon
+                <+> def
         )
         mdef
   | otherwise = Disp.text name Disp.<> Disp.colon <+> cur
diff --git a/cabal-install/src/Distribution/Client/ProjectBuilding.hs b/cabal-install/src/Distribution/Client/ProjectBuilding.hs
index f915af1..4bd1e60 100644
--- a/cabal-install/src/Distribution/Client/ProjectBuilding.hs
+++ b/cabal-install/src/Distribution/Client/ProjectBuilding.hs
@@ -1083,7 +1083,7 @@ unpackPackageTarball verbosity tarball parentdir pkgid pkgTextOverride =
       parentdir
         </> pkgsubdir
         </> prettyShow pkgname
-        <.> "cabal"
+          <.> "cabal"
     pkgsubdir = prettyShow pkgid
     pkgname = packageName pkgid
 
diff --git a/cabal-install/src/Distribution/Client/ProjectConfig.hs b/cabal-install/src/Distribution/Client/ProjectConfig.hs
index 2a0f822..1dbf980 100644
--- a/cabal-install/src/Distribution/Client/ProjectConfig.hs
+++ b/cabal-install/src/Distribution/Client/ProjectConfig.hs
@@ -449,7 +449,7 @@ resolveBuildTimeSettings
           cabalLogsDirectory
             </> "$compiler"
             </> "$libname"
-            <.> "log"
+              <.> "log"
       givenTemplate = flagToMaybe projectConfigLogFile
 
       useDefaultTemplate
diff --git a/cabal-install/src/Distribution/Client/ProjectPlanning.hs b/cabal-install/src/Distribution/Client/ProjectPlanning.hs
index a67a66a..c37359f 100644
--- a/cabal-install/src/Distribution/Client/ProjectPlanning.hs
+++ b/cabal-install/src/Distribution/Client/ProjectPlanning.hs
@@ -1737,7 +1737,7 @@ elaborateInstallPlan
               dieProgress $
                 text "Internal libraries only supported with per-component builds."
                   $$ text "Per-component builds were disabled because"
-                  <+> fsep (punctuate comma reasons)
+                    <+> fsep (punctuate comma reasons)
           -- TODO: Maybe exclude Backpack too
 
           elab0 = elaborateSolverToCommon spkg
diff --git a/cabal-install/src/Distribution/Client/Store.hs b/cabal-install/src/Distribution/Client/Store.hs
index d678e13..a8809ab 100644
--- a/cabal-install/src/Distribution/Client/Store.hs
+++ b/cabal-install/src/Distribution/Client/Store.hs
@@ -202,28 +202,28 @@ newStoreEntry
         if exists
           then -- If the entry exists then we lost the race and we must abandon,
           -- unlock and re-use the existing store entry.
-          do
-            info verbosity $
-              "Concurrent build race: abandoning build in favour of existing "
-                ++ "store entry "
-                ++ prettyShow compid
-                </> prettyShow unitid
-            return UseExistingStoreEntry
+            do
+              info verbosity $
+                "Concurrent build race: abandoning build in favour of existing "
+                  ++ "store entry "
+                  ++ prettyShow compid
+                  </> prettyShow unitid
+              return UseExistingStoreEntry
           else -- If the entry does not exist then we won the race and can proceed.
-          do
-            -- Register the package into the package db (if appropriate).
-            register
+            do
+              -- Register the package into the package db (if appropriate).
+              register
 
-            -- Atomically rename the temp dir to the final store entry location.
-            renameDirectory incomingEntryDir finalEntryDir
-            for_ otherFiles $ \file -> do
-              let finalStoreFile = storeDirectory compid </> makeRelative (incomingTmpDir </> (dropDrive (storeDirectory compid))) file
-              createDirectoryIfMissing True (takeDirectory finalStoreFile)
-              renameFile file finalStoreFile
+              -- Atomically rename the temp dir to the final store entry location.
+              renameDirectory incomingEntryDir finalEntryDir
+              for_ otherFiles $ \file -> do
+                let finalStoreFile = storeDirectory compid </> makeRelative (incomingTmpDir </> (dropDrive (storeDirectory compid))) file
+                createDirectoryIfMissing True (takeDirectory finalStoreFile)
+                renameFile file finalStoreFile
 
-            debug verbosity $
-              "Installed store entry " ++ prettyShow compid </> prettyShow unitid
-            return UseNewStoreEntry
+              debug verbosity $
+                "Installed store entry " ++ prettyShow compid </> prettyShow unitid
+              return UseNewStoreEntry
     where
       finalEntryDir = storePackageDirectory compid unitid
 
diff --git a/cabal-install/src/Distribution/Client/Utils.hs b/cabal-install/src/Distribution/Client/Utils.hs
index f7a51bf..3dac605 100644
--- a/cabal-install/src/Distribution/Client/Utils.hs
+++ b/cabal-install/src/Distribution/Client/Utils.hs
@@ -510,7 +510,7 @@ concatMapM :: Monad m => (a -> m [b]) -> [a] -> m [b]
 {-# INLINE concatMapM #-}
 concatMapM op = foldr f (pure [])
   where
-    f x xs = do x' <- op x; if null x' then xs else do { xs' <- xs; pure $ x' ++ xs' }
+    f x xs = do x' <- op x; if null x' then xs else do xs' <- xs; pure $ x' ++ xs'
 
 -- | From Control.Monad.Extra
 --   https://hackage.haskell.org/package/extra-1.7.9
